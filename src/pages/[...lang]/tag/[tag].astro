---
import { type CollectionEntry, getCollection } from "astro:content"
import BlogLayout from "../../../layouts/BlogLayout.astro"
import Header from "../../../components/Header.astro"
import Footer from "../../../components/Footer.astro"
import PostCard from "../../../components/PostCard.astro"
import SiteOptions from "../../../site.config.mjs"
import { getLangFromUrl, useTranslations } from "../../../i18n/config.ts"

export async function getStaticPaths() {
  const allPosts = await getCollection("article")
  
  // Get English tags (articles not in zh folder)
  const englishPosts = allPosts.filter(post => !post.slug.startsWith('zh/'))
  const englishTags = [...new Set(englishPosts.flatMap((post) => post.data.tags))]
  
  // Get Chinese tags (articles in zh folder)
  const chinesePosts = allPosts.filter(post => post.slug.startsWith('zh/'))
  const chineseTags = [...new Set(chinesePosts.flatMap((post) => post.data.tags))]

  const paths = []
  
  // Generate paths for English (no lang prefix)
  englishTags.forEach((tag) => {
    const tagPosts = englishPosts.filter((post) => 
      post.data.tags.some((postTag) => postTag.toLowerCase().replace(/\s+/g, "-") === tag.toLowerCase().replace(/\s+/g, "-"))
    )
    if (tagPosts.length > 0) {
      paths.push({
        params: { 
          lang: undefined,
          tag: tag.toLowerCase().replace(/\s+/g, "-")
        },
        props: {
          tag,
          posts: tagPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()),
        },
      })
    }
  })
  
  // Generate paths for Chinese (zh prefix)
  chineseTags.forEach((tag) => {
    const tagPosts = chinesePosts.filter((post) => 
      post.data.tags.some((postTag) => postTag.toLowerCase().replace(/\s+/g, "-") === tag.toLowerCase().replace(/\s+/g, "-"))
    )
    if (tagPosts.length > 0) {
      paths.push({
        params: { 
          lang: 'zh',
          tag: tag.toLowerCase().replace(/\s+/g, "-")
        },
        props: {
          tag,
          posts: tagPosts.sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf()),
        },
      })
    }
  })
  
  return paths
}

type Props = {
  tag: string
  posts: CollectionEntry<"article">[]
}

const { lang, tag } = Astro.params
const currentLang = lang || 'en'
const t = useTranslations(currentLang as 'en' | 'zh')
const { posts } = Astro.props

// Generate language-specific URLs
const getLangUrl = (path: string) => {
  return currentLang === 'en' ? path : `/${currentLang}${path}`;
};
---

<BlogLayout title={`${tag} ${currentLang === 'zh' ? '文章' : 'Articles'} - ${SiteOptions.siteTitle}`} description={`${currentLang === 'zh' ? '标签为 ' + tag + ' 的文章' : 'Articles tagged with ' + tag}`}>
  <Header showTitle={false} />

  <!-- Light Horizontal Bar -->
  <hr class="border-t border-gray-200 dark:border-gray-700 my-8" />

  <!-- Page Header -->
  <header class="mb-12 text-center">
    <h1 class="text-3xl font-bold tracking-tight mb-4 text-gray-900 dark:text-slate-100 capitalize">
      {tag.toUpperCase()}
    </h1>
    <p class="text-lg text-gray-500 dark:text-gray-400">
      {posts.length}
      {posts.length === 1 
        ? (currentLang === 'zh' ? " 篇文章" : " article") 
        : (currentLang === 'zh' ? " 篇文章" : " articles")
      } {currentLang === 'zh' ? `标签为 "${tag}"` : `tagged with "${tag}"`}
    </p>
  </header>

  <!-- Posts List -->
  <section>
    {
      posts.length > 0 ? (
        <ul class="space-y-4">
          {posts.map((post) => (
            <PostCard post={post} showCategory={false} />
          ))}
        </ul>
      ) : (
        <div class="text-center py-12">
          <p class="text-gray-500 dark:text-gray-400 text-lg">{t('labels.noArticlesFound')}</p>
        </div>
      )
    }
  </section>

  <!-- Navigation -->
  <div class="mt-12 flex justify-center space-x-6">
    <a href={getLangUrl('/tags')} class="inline-flex items-center text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-slate-100 transition-colors">
      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
      </svg>
      {t('labels.allTags')}
    </a>
    <a href={currentLang === 'en' ? "/" : "/zh"} class="inline-flex items-center text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-slate-100 transition-colors">
      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
      </svg>
      {t('labels.backToHome')}
    </a>
  </div>

  <!-- Minimal Footer -->
  <Footer />
</BlogLayout> 