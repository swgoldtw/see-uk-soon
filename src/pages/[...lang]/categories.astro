---
import { getCollection } from "astro:content"
import BlogLayout from "../../layouts/BlogLayout.astro"
import Header from "../../components/Header.astro"
import Footer from "../../components/Footer.astro"
import SiteOptions from "../../site.config.mjs"
import { getLangFromUrl, useTranslations } from "../../i18n/config.ts"

export async function getStaticPaths() {
  return [
    { params: { lang: undefined } }, // /categories (Chinese)
    { params: { lang: 'en' } },      // /en/categories (English)
  ]
}

const { lang } = Astro.params
const currentLang = lang || 'zh'
const t = useTranslations(currentLang as 'en' | 'zh')

// Get all articles and filter by language based on folder structure
const allPosts = await getCollection("article")
const currentLangPosts = allPosts.filter(post => {
  if (currentLang === 'zh') {
    // For Chinese, only show articles NOT in the en folder (i.e., in the root)
    return !post.slug.startsWith('en/');
  } else {
    // For English, only show articles in the en folder
    return post.slug.startsWith('en/');
  }
});

// Get unique categories from the filtered posts
const allCategories = [...new Set(currentLangPosts.map((post) => post.data.category))].sort()

// Category mapping for translations
const categoryTranslations: Record<string, string> = {
  'Coding': t('categories.coding'),
  'Web Dev': t('categories.webDev'),
  'API Design': t('categories.apiDesign'),
  'Technology': t('categories.technology'),
}

// Count posts per category (using filtered posts)
const categoryCounts = allCategories.map((category) => ({
  name: category,
  translatedName: categoryTranslations[category] || category,
  count: currentLangPosts.filter((post) => post.data.category === category).length,
}))

// Generate language-specific URLs
const getLangUrl = (path: string) => {
  return currentLang === 'zh' ? path : `/${currentLang}${path}`;
};
---

<BlogLayout title={`${t('nav.categories')} - ${SiteOptions.siteTitle}`} description="Browse articles by categories">
  <Header showTitle={false} />

  <!-- Light Horizontal Bar -->
  <hr class="border-t border-gray-200 dark:border-gray-700 my-8" />

  <!-- Page Header -->
  <header class="mb-12 text-center">
    <h1 class="text-4xl font-bold tracking-tight mb-4 text-gray-900 dark:text-slate-100">{t('nav.categories')}</h1>
    <p class="text-lg text-gray-500 dark:text-gray-400">{t('labels.exploreArticlesByCategories')}</p>
  </header>

  <!-- Categories Grid -->
  <section>
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
      {
        categoryCounts.map(({ name, translatedName, count }) => (
          <a href={getLangUrl(`/category/${name.toLowerCase().replace(/\s+/g, "-")}`)} class="bg-gray-50 dark:bg-slate-800 rounded-lg p-6 hover:bg-gray-100 dark:hover:bg-slate-700 transition-colors border border-gray-200 dark:border-gray-700 group">
            <div class="flex items-center justify-between mb-2">
              <h3 class="text-xl font-semibold text-gray-900 dark:text-slate-100 group-hover:text-gray-700 dark:group-hover:text-slate-200 transition-colors">{translatedName}</h3>
              <span class="text-sm text-gray-500 dark:text-gray-400 bg-gray-200 dark:bg-slate-600 px-3 py-1 rounded-full font-medium">{count}</span>
            </div>
            <p class="text-sm text-gray-600 dark:text-gray-400">
              {count === 1 
                ? (currentLang === 'zh' ? "1 篇文章" : "1 article") 
                : (currentLang === 'zh' ? `${count} 篇文章` : `${count} articles`)
              } {currentLang === 'zh' ? "在此分类中" : "in this category"}
            </p>
          </a>
        ))
      }
    </div>
  </section>

  <!-- Back to Home -->
  <div class="mt-12 text-center">
    <a href={currentLang === 'zh' ? "/" : "/en"} class="inline-flex items-center text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-slate-100 transition-colors">
      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
      </svg>
      {t('labels.backToHome')}
    </a>
  </div>

  <!-- Minimal Footer -->
  <Footer />
</BlogLayout> 